{
	"nodes":[
		{"id":"87540043936711f3","type":"text","text":"# Fundamentals\n\nPeople, Process, Technology\n\nRoles:\n- SOC Analyst (1-3)\n- Security Engineer\n- Detection Engineer\n- SOC Manager\n- CISO\n\nLog Types\n- System\n- Security\n- Application\n- Audit (change log)\n- Network\n- Access","x":-170,"y":-129,"width":370,"height":569},
		{"id":"2b78ebc6ef307aea","type":"text","text":"# SOC","x":-46,"y":-420,"width":122,"height":60,"color":"5"},
		{"id":"d18a7ad6972922f6","type":"text","text":"# Forensics","x":-1725,"y":-400,"width":191,"height":60,"color":"2"},
		{"id":"1cdcc0e53a40bf00","type":"text","text":"# Memory Analysis\n\n\n### Extract Strings\n- by default, the `strings` tool grabs ASCII\n\t- `strings -e l` grabs little-endian\n\t- `strings -e b` grabs big-endian\n- `strings [memory_image] > [file].strings.ascii.txt`\n- `strings -e l [memory_image] > [file].strings.unicode_little_endian.txt`\n\n### Volatility\n- `vol3 -f [file] [plugin]`\n\t- `windows.pstree.PsTree` lists processes based on their parent PID\n\t- `windows.pslist.PsList` lists active processes in the memory image\n\t- `windows.cmdline.CmdLine` analyzes command line arguments\n\t- `windows.dlllist.DllList` lists loaded modules in a windows memory image\n\t- `windows.psscan.PsScan` scans for processes present \n\t- `windows.malfind.Malfind` finds potential instances of injected code\n- Run several plugins at once and output results into separate files:\n\t- `for plugin in [plugin] [plugin]; do vol3 -q -f [memory image] $plugin > [image].$plugin.txt; done`\n\t- `for` loop with all the plugins you want listed (no comma)\n\t- `do` the command you want with the variable `$plugin` for inserting into the command\n\t- `>` redirects each output to the file you want\n\t- `done` end the loop when last plugin is exhausted","x":-2008,"y":-1180,"width":758,"height":420},
		{"id":"e1ace76aadbd9583","type":"text","text":"# Disk Analysis\n\nFTK Imager","x":-2544,"y":-1130,"width":404,"height":190},
		{"id":"eaa50c3e761dec0b","type":"text","text":"# Windows Logs\n\nEvent Viewer -> Windows Logs","x":440,"y":-120,"width":560,"height":155},
		{"id":"7decc00d48efe176","type":"text","text":"# Linux Logs\n\nlogin events:\n- `/var/run/utmp` tracks currently logged in users\n- `/var/log/wtmp` keeps a history of login/logout actions\n- `/var/log/btmp` keeps a record of invalid login attempts\n-  You can read these using the `utmpdump` tool from github","x":440,"y":240,"width":579,"height":237},
		{"id":"673dc6351e6e1773","type":"text","text":"# RE \n\nReverse Engineering and Debugging: taking a finished executable and understanding how it works.\n\nDisassemblers and Decompilers: help understand a binary's behavior by breaking it into a more understandable format.\n","x":-3120,"y":-857,"width":725,"height":252},
		{"id":"3b5f0e9d867881d8","type":"text","text":"# Windows Forensics\n\n\nNTFS - New Technology File System, proprietary system from Microsoft, successor to the FAT file system.\nKey NTFS Artifacts:\n- Master File Table (MFT) Entries: stores extensive metadata for each file\n- Update Sequence Number (USN) Journal: Tracks file changes, modifications, deletions, renames\n- Registry Hives: Tracks system changes and configurations\n- Shellbags: registry entries that store folder appearance settings (window positions, sorting preferences, etc.). Can be analyzed to identify what folders a user accessed.\n- Thumbnail Cache: Can identify what files were recently viewed, even if the original was deleted\n- Alternate Data Streams (ADS): additional streams of data associated with files. Attackers may alter these to hide data, forensic investigator needs to check to ensure they make sense.\n- Volume Shadow Copies: snapshots of a file system.\n- Security Descriptors and ACLSs\n\nWindows Event Logs: `C:\\Windows\\System32\\winevt\\logs`\n\nExecution Artifacts: traces left behind when programs and processes are executed.\n- Prefetch Files: contains metadata about execution of applications. `C:\\Windows\\Prefetch`\n- Shimcache: records info about compatibility and performance optimizations of applications. Can also illuminate recently executed programs. `Registry: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache`\n- Amcache: database that records info about installed applications and executables. `C:\\Windows\\AppCompat\\Programs\\Amcache.hve` (Binary Registry Hive)\n- UserAssist: registry key that records that programs were executed by a user. `Registry: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist`\n- RunMRU (most recently used): lists info about recently executed programs. `Registry: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU`\n- Jump Lists: store information about recently accessed files. `User-specific folders (e.g., %AppData%\\Microsoft\\Windows\\Recent)\n\n\nWindows Persistence Artifacts\n- Windows Registry: crucial database storing system settings for the OS. Stores user account security configurations in the Security Accounts Manager (SAM). Inspect autorun keys.\n- Schtasks: `C:\\Windows\\System32\\Tasks` These are XML files that details programs set to run.\n- Services: Malicious actors can craft rogue services to maintain persistence. Keep an eye on the `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services` registry key.","x":-3206,"y":-140,"width":897,"height":720},
		{"id":"775b876322c230b0","type":"text","text":"# Malware/Binary Analysis\n\nPEStudio\n- Neat, GUI interface for analyzing binary files\n\nCAPA (common Analysis Platform for Artifacts)\n- identifies capabilities of files such as ELF, .bin, .exe, PE, .NET, shellcode, etc.\n- `capa.exe .\\[file]` or `capa .\\[file]`\n- Results:\n\t- MAEC (Malware Attribute Enumeration and Characterization) results: returns malware category according to MAEC's index. Google for additional information on the category\n\t- ATT&CK tactics and techniques\n\t- MBC (Malware Behavior Catalogue): Shows information about similar malwares as well as their objectives and behaviors\n\t- Capabilities\n\t\t- The `namespace` column shows how different capabilities can be grouped together. \n\t\t- Format under `namespace` is as follows - `Top-Level Namespace/Namespaces`\n\n### Oledump.py\n- Analyzes OLE2 (Object Linking and Embedding) files (AKA Structured Storage or Compound File Binary Format).\n- `oledump.py [file]`\n\t- The Data Stream containing an uppercase `M` is a Macro. Take note of the index number for this data stream.\n\t- For example, if the data stream with `M` is `A4: M` then:\n\t- `oledump.py [file] -s 4`\n\t- adding `--vbadecompress` makes the output readable.\n\n### InetSim\n- Simulates network interactions of a binary file\n- Edit the inetsim.conf `#dns_default_ip` to your IP address\n- `sudo inetsim`","x":-1120,"y":-610,"width":560,"height":470},
		{"id":"e50d508bee998fa6","type":"text","text":"### File Information:\n\n- PDF - `pdfinfo` (install `poppler-utils`)\n- Photo - `exiftool` (install `libimage-exiftool-perl`)","x":-2528,"y":-416,"width":520,"height":152},
		{"id":"f2e0db0bb612fbc3","type":"text","text":"# Evidence Acquisition\n\n\n### Forensic Imaging\n\n- Create exact copies of data.\n- `FTK Imager` - disk imaging tool\n\t- `File -> Create Disk Image`\n\t- Select source drive to image\n- `Arsenal` Mount a disk image in the file system (use `read-only`)\n\t- launch with admin rights\n\t- `mount disk image`\n\t- Will appear as a `D:\\` drive\n- `DD` and `DCFLDD` - CLI utilities on unix systems\n\n### Host-based Evidence and Triage\n\n- `FTK Imager` Can capture a memory image\n- `WinPmem` opensource memory acquisition for windows.\n- For VMs, you're looking for a `.vmem` file\n- use `KAPE` for retrieving forensic data from a mounted image (from `Arsenal` or other)\n\t- `gkape.exe` is the gui version, `kape.exe` is regular\n\t- Targets refer to specific artifacts, they have a `.tkape` extension, they are located in `\\KAPE\\Targets` \n- `Velociraptor` https://github.com/Velocidex/velociraptor\n\t- artifact collection remotely and en masse\n\t- You can use Velociraptor on Kape Files","x":-2008,"y":0,"width":760,"height":456}
	],
	"edges":[
		{"id":"3d7ab01261d48f0d","fromNode":"87540043936711f3","fromSide":"right","toNode":"eaa50c3e761dec0b","toSide":"left"},
		{"id":"04135bbe1cce8aa6","fromNode":"2b78ebc6ef307aea","fromSide":"bottom","toNode":"87540043936711f3","toSide":"top"},
		{"id":"d402012ea344ef24","fromNode":"d18a7ad6972922f6","fromSide":"right","toNode":"775b876322c230b0","toSide":"left"},
		{"id":"7628cf9d7aa05b62","fromNode":"d18a7ad6972922f6","fromSide":"top","toNode":"1cdcc0e53a40bf00","toSide":"bottom"},
		{"id":"258e535fa59ccc8e","fromNode":"d18a7ad6972922f6","fromSide":"left","toNode":"673dc6351e6e1773","toSide":"right"},
		{"id":"a15112e8538aa3ec","fromNode":"1cdcc0e53a40bf00","fromSide":"left","toNode":"e1ace76aadbd9583","toSide":"right"},
		{"id":"63a3c87041ac446e","fromNode":"87540043936711f3","fromSide":"right","toNode":"7decc00d48efe176","toSide":"left"},
		{"id":"4e14adfb11ed8227","fromNode":"d18a7ad6972922f6","fromSide":"left","toNode":"3b5f0e9d867881d8","toSide":"right"},
		{"id":"dcfec62971daea6e","fromNode":"d18a7ad6972922f6","fromSide":"left","toNode":"e50d508bee998fa6","toSide":"right"},
		{"id":"8cb783aa4e85d373","fromNode":"d18a7ad6972922f6","fromSide":"bottom","toNode":"f2e0db0bb612fbc3","toSide":"top"}
	]
}